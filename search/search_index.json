{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"mkdocs-nbstore","text":"<p>Connect Jupyter notebooks to your MkDocs documentation</p> <p>mkdocs-nbstore is a plugin that seamlessly embeds Jupyter notebook visualizations in your documentation, solving the disconnect between code development and documentation.</p>"},{"location":"#why-use-mkdocs-nbstore","title":"Why Use mkdocs-nbstore?","text":""},{"location":"#the-documentation-challenge","title":"The Documentation Challenge","text":"<p>Data scientists, researchers, and technical writers face a common dilemma:</p> <ul> <li>Development happens in notebooks - ideal for experimentation and visualization</li> <li>Documentation lives in markdown - perfect for narrative and explanation</li> <li>Connecting the two is painful - screenshots break, exports get outdated</li> </ul>"},{"location":"#our-solution","title":"Our Solution","text":"<p>This plugin creates a live bridge between your notebooks and documentation by:</p> <ul> <li>Keeping environments separate - work in the tool best suited for each task</li> <li>Maintaining connections - reference specific figures from notebooks</li> <li>Automating updates - changes to notebooks reflect in documentation</li> </ul>"},{"location":"#key-benefits","title":"Key Benefits","text":"<ul> <li> <p>True Separation of Concerns:   Develop visualizations in Jupyter notebooks and write documentation   in markdown files, with each tool optimized for its purpose.</p> </li> <li> <p>Intuitive Markdown Syntax:   Use standard image syntax with a simple extension to reference   notebook figures: <code>![alt text](notebook.ipynb){#figure-id}</code></p> </li> <li> <p>Dynamic Notebook Execution:   Execute notebooks on-demand during documentation builds with the   <code>.execute</code> option, ensuring results are always up-to-date.</p> </li> <li> <p>Automatic Updates:   When you modify your notebooks, your documentation updates   automatically in MkDocs serve mode.</p> </li> <li> <p>Clean Source Documents:   Your markdown remains readable and focused on content, without   code distractions or complex embedding techniques.</p> </li> <li> <p>Enhanced Development Experience:   Take advantage of IDE features like code completion and syntax   highlighting in the appropriate environment.</p> </li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#1-installation","title":"1. Installation","text":"<pre><code>pip install mkdocs-nbstore\n</code></pre>"},{"location":"#2-configuration","title":"2. Configuration","text":"<p>Add to your <code>mkdocs.yml</code>:</p> mkdocs.yml<pre><code>plugins:\n  - mkdocs-nbstore:\n      notebook_dir: ../notebooks\n</code></pre>"},{"location":"#3-mark-figures-in-your-notebook","title":"3. Mark Figures in Your Notebook","text":"<p>In your Jupyter notebook, identify figures with a comment:</p> my-notebook.ipynb<pre><code># #my-figure\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8, 4))\nax.plot([1, 2, 3, 4], [10, 20, 25, 30])\n</code></pre>"},{"location":"#4-reference-in-markdown","title":"4. Reference in Markdown","text":"<p>Use standard Markdown image syntax with the figure identifier:</p> <pre><code>![Chart description](my-notebook.ipynb){#my-figure}\n</code></pre>"},{"location":"#advanced-usage","title":"Advanced Usage","text":"<p>For more detailed information on how to use mkdocs-nbstore, see:</p> <ul> <li>Notebook Configuration - Setting up notebook directories</li> <li>Display Options - Control how notebook content is displayed</li> <li>Execute Option - Run notebooks during documentation builds</li> </ul>"},{"location":"#the-power-of-separation","title":"The Power of Separation","text":"<p>Creating documentation and developing visualizations involve different workflows and timeframes. When building visualizations in Jupyter notebooks, you need rapid cycles of execution, verification, and modification.</p> <p>This plugin is designed specifically to address these separation of concerns, allowing you to:</p> <ul> <li>Focus on code in notebooks without documentation distractions</li> <li>Focus on narrative in markdown without code interruptions</li> <li>Maintain powerful connections between both environments</li> </ul> <p>Each environment is optimized for its purpose, while the plugin handles the integration automatically.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please open an issue or submit a pull request.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License.</p>"},{"location":"examples/format/","title":"Format","text":""},{"location":"examples/format/#png","title":"PNG","text":"<pre><code>![PNG](format/png.ipynb){#format-png .cell}\n</code></pre> <pre><code>import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(3, 2))\nax.plot([1, 2, 3])\n</code></pre>"},{"location":"examples/format/#svg","title":"SVG","text":"<pre><code>![SVG](format/svg.ipynb){#format-svg .cell}\n</code></pre> <pre><code>import matplotlib.pyplot as plt\nfrom nbstore import set_formatter\n\nset_formatter(\"matplotlib\", \"svg\")\n\n\nfig, ax = plt.subplots(figsize=(3, 2))\nax.plot([1, 2, 3])\n</code></pre>"},{"location":"examples/format/#html","title":"HTML","text":""},{"location":"examples/format/#pandas-dataframe","title":"Pandas DataFrame","text":"<pre><code>![Pandas DataFrame](format/html.ipynb){#pandas .cell}\n</code></pre> <pre><code>import pandas as pd\n\npd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n</code></pre> A B 0 1 4 1 2 5 2 3 6"},{"location":"examples/format/#polars-dataframe","title":"Polars DataFrame","text":"<pre><code>![Polars DataFrame](format/html.ipynb){#polars .cell}\n</code></pre> <pre><code>import polars as pl\n\npl.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n</code></pre> shape: (3, 2)ABi64i64142536"},{"location":"examples/html/","title":"Using HTML","text":"<pre><code>![alt](image.ipynb){#image-50-100 .cell}\n</code></pre> <pre><code>import numpy as np\nfrom PIL import Image\n\nx = np.random.randint(0, 256, (50, 100), dtype=np.uint8)\nImage.fromarray(x)\n</code></pre> <pre><code>![alt](image.ipynb){#image-50-50 .cell}\n</code></pre> <pre><code>x = np.random.randint(0, 256, (50, 50), dtype=np.uint8)\nImage.fromarray(x)\n</code></pre> <p> a </p>"},{"location":"usage/class/","title":"Display Control Options","text":"<p>mkdocs-nbstore provides several class options that allow you to control how Jupyter notebook content is displayed in your documentation. These options can be specified using standard Markdown attribute syntax.</p>"},{"location":"usage/class/#default-behavior-no-class-options","title":"Default Behavior (No Class Options)","text":"<p>When no class options are specified, mkdocs-nbstore displays only the figure output from the referenced Jupyter notebook cell.</p> <p>Example:</p> <pre><code>![alt text](class.ipynb){#image}\n</code></pre> <p>This produces the following output:</p> <p></p> <p>This default behavior is ideal for when you only want to show visualizations without the accompanying code.</p>"},{"location":"usage/class/#automatic-fallback-to-source-code","title":"Automatic Fallback to Source Code","text":"<p>If the referenced cell has no output (for example, if the cell hasn't been executed or doesn't produce a visual output), the plugin will automatically display the cell's source code instead.</p> <p>This fallback mechanism ensures that:</p> <ul> <li>Your documentation is never left with \"missing\" content</li> <li>Readers can still understand what code should produce an output</li> <li>You can identify cells that need to be executed in your notebooks</li> </ul> <p>Example of fallback behavior:</p> <pre><code>![alt text](){#func}\n</code></pre> <p>This produces the following output (since the referenced cell has no visual output):</p> <pre><code>def plot(ax):\n    ax.plot([1, 3, 4])\n</code></pre> <p>Note</p> <p>Here we use empty parentheses <code>()</code> to tell the plugin to use the most recently referenced notebook (in this case <code>class.ipynb</code>). See Automatic Notebook Selection for more details.</p>"},{"location":"usage/class/#designed-for-non-visual-code","title":"Designed for Non-Visual Code","text":"<p>This automatic fallback is especially useful for cells that intentionally don't produce visual output, such as:</p> <ul> <li>Function definitions</li> <li>Class declarations</li> <li>Data preparation code</li> <li>Configuration settings</li> </ul> <p>This design makes the workflow more intuitive - the plugin automatically shows the source code for cells without visual output, making your documentation process simpler and more efficient. No additional configuration is needed for these common scenarios.</p> <p>This automatic fallback makes your documentation more robust and helps identify when notebook cells need to be executed to generate expected visualizations.</p>"},{"location":"usage/class/#source-code-only-source-option","title":"Source Code Only: <code>.source</code> Option","text":"<p>The <code>.source</code> option instructs mkdocs-nbstore to display only the source code of the cell, without its output.</p> <p>Example:</p> <pre><code>![alt text](){#image .source}\n</code></pre> <p>This produces the following output:</p> <pre><code>import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(2, 1))\nplt.plot([1, 3, 2, 4])\n</code></pre> <p>This option is useful when:</p> <ul> <li>You want to explain the code that generates a visualization</li> <li>The code itself is the primary focus</li> <li>You're creating tutorials where readers should focus on implementation</li> </ul>"},{"location":"usage/class/#complete-cell-cell-option","title":"Complete Cell: <code>.cell</code> Option","text":"<p>The <code>.cell</code> option displays both the source code and the output of the cell, similar to how it appears in Jupyter notebooks.</p> <p>Example:</p> <pre><code>![alt text](){#image .cell}\n</code></pre> <p>This produces the following output:</p> <pre><code>import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(2, 1))\nplt.plot([1, 3, 2, 4])\n</code></pre> <p></p> <p>This option provides a comprehensive view and is ideal for:</p> <ul> <li>Educational content where both code and result are important</li> <li>Detailed explanations of data processing and visualization techniques</li> <li>Demonstrating how code changes affect output</li> </ul>"},{"location":"usage/class/#combining-options","title":"Combining Options","text":"<p>While <code>.source</code> and <code>.cell</code> cannot be meaningfully combined (<code>.source</code> takes precedence), you can combine them with other standard Markdown attributes:</p> <p>Example:</p> <pre><code>![alt](){#image .source title=\"My title\" hl_lines=\"3 4\"}\n</code></pre> <p>This produces the following output:</p> My title<pre><code>import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(2, 1))\nplt.plot([1, 3, 2, 4])\n</code></pre> <p>Here, we use two additional attributes:</p> <ul> <li><code>title=\"My title\"</code> to add a title to the image</li> <li><code>hl_lines=\"3 4\"</code> to highlight lines 3 and 4 in the source code</li> </ul> <p>For more information on how to use the <code>title</code> and <code>hl_lines</code> attributes, see the Adding a title and Highlighting specific lines from the MkDocs Material documentation.</p>"},{"location":"usage/class/#best-practices","title":"Best Practices","text":"<ul> <li>Use the default (no options) when you want a clean document focused on results</li> <li>Use <code>.source</code> for code-focused explanations or tutorials</li> <li>Use <code>.cell</code> for comprehensive educational material</li> <li>Be consistent with your choice of options throughout your documentation</li> </ul> <p>These class options give you flexibility in how you present Jupyter notebook content while maintaining a clean, readable document structure.</p>"},{"location":"usage/execute/","title":"Execute Option","text":"<p>The <code>.execute</code> class option allows you to dynamically execute notebooks when building your documentation. This powerful feature ensures your documentation always displays the most up-to-date results without requiring manual notebook execution.</p>"},{"location":"usage/execute/#basic-usage","title":"Basic Usage","text":"<p>To execute a notebook when referenced in your documentation, simply add the <code>.execute</code> class option:</p> <pre><code>![Cell output](notebook.ipynb){#data-visualization .execute}\n</code></pre> <p>This will execute the entire notebook before extracting and displaying the specified cell's output.</p>"},{"location":"usage/execute/#requirements","title":"Requirements","text":"<p>To use the <code>.execute</code> option, you need to have nbconvert installed:</p> <pre><code>pip install nbconvert\n</code></pre>"},{"location":"usage/execute/#key-benefits","title":"Key Benefits","text":""},{"location":"usage/execute/#1-automated-workflow","title":"1. Automated Workflow","text":"<p>The <code>.execute</code> option streamlines your documentation workflow:</p> <ul> <li>No manual execution required - notebooks are automatically   executed during documentation build</li> <li>Apply once, execute completely - adding <code>.execute</code> to one   reference executes the entire notebook</li> <li>State preservation - executed notebook states are preserved   during development server sessions</li> </ul>"},{"location":"usage/execute/#2-smart-execution-management","title":"2. Smart Execution Management","text":"<p>mkdocs-nbstore intelligently manages notebook execution:</p> <ul> <li>Execution caching - notebooks are only re-executed when   necessary</li> <li>Change detection - automatically re-executes when notebook   content changes</li> <li>No duplication needed - apply <code>.execute</code> to just one cell   reference per notebook</li> </ul>"},{"location":"usage/execute/#3-documentation-consistency","title":"3. Documentation Consistency","text":"<p>Using <code>.execute</code> ensures documentation consistency:</p> <ul> <li>Fresh results - visualizations and outputs always reflect   the current code</li> <li>No stale outputs - eliminates inconsistencies from partial   manual executions</li> <li>Clean notebook states - entire notebooks are executed,   preventing internal state conflicts</li> </ul>"},{"location":"usage/execute/#usage-patterns","title":"Usage Patterns","text":""},{"location":"usage/execute/#single-execution-point","title":"Single Execution Point","text":"<p>You only need to add <code>.execute</code> to one cell reference per notebook, typically the first one:</p> <pre><code>![First visualization](analysis.ipynb){#first-chart .execute}\n\nMore explanation here...\n\n![Second visualization](analysis.ipynb){#second-chart}\n</code></pre>"},{"location":"usage/execute/#combining-with-other-options","title":"Combining with Other Options","text":"<p>The <code>.execute</code> option can be combined with other display options:</p> <pre><code>![Execute and show full cell](notebook.ipynb){#setup .execute .cell}\n![Execute and show only source](notebook.ipynb){#helper-function .execute .source}\n</code></pre>"},{"location":"usage/execute/#behavior-notes","title":"Behavior Notes","text":"<ul> <li>Executed notebooks are not saved back to disk - your   original notebooks remain unchanged</li> <li>Once executed in a serve session, notebooks won't be re-executed   when markdown files change</li> <li>Notebooks will automatically re-execute when their content   changes</li> <li>The entire notebook is always executed, ensuring all cells have   consistent state</li> </ul> <p>This execution model provides a perfect balance between performance and up-to-date documentation.</p>"},{"location":"usage/notebook/","title":"Notebook Configuration","text":"<p>This page explains how to configure mkdocs-nbstore to work with your Jupyter notebooks.</p>"},{"location":"usage/notebook/#setting-the-notebook-directory","title":"Setting the Notebook Directory","text":"<p>The first step is to specify where your Jupyter notebooks are located. This is done using the <code>notebook_dir</code> option in your <code>mkdocs.yml</code> configuration file.</p> <p>Example:</p> mkdocs.yml<pre><code>plugins:\n  - mkdocs-nbstore:\n      notebook_dir: ../notebooks\n</code></pre> <p>The <code>notebook_dir</code> path is relative to your <code>docs</code> directory. For example, with the configuration above and the following project structure:</p> <pre><code>project/\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 index.md\n\u251c\u2500 notebooks/    &lt;- notebook_dir points here\n\u2502  \u251c\u2500 data-analysis.ipynb\n\u2502  \u2514\u2500 visualization.ipynb\n\u2514\u2500 mkdocs.yml\n</code></pre> <p>All notebooks in the <code>notebooks</code> directory will be available to reference in your markdown files. The <code>notebook_dir</code> can contain subdirectories, and all notebooks in the subdirectories will also be available.</p>"},{"location":"usage/notebook/#referencing-notebooks-in-markdown","title":"Referencing Notebooks in Markdown","text":"<p>Once you've configured the notebook directory, you can reference notebooks using the standard Markdown image syntax with attributes:</p> <pre><code>![Alt text](visualization.ipynb){#figure-identifier}\n</code></pre> <p>Where:</p> <ul> <li><code>Alt text</code> is the alternative text for the image</li> <li><code>visualization.ipynb</code> is the path to the notebook file,   relative to the <code>notebook_dir</code> (See the directory tree above)</li> <li><code>#figure-identifier</code> is the identifier for the specific   figure in the notebook</li> </ul> <p>For more information about using class options to control how notebook content is displayed, see the Display Control Options page.</p>"},{"location":"usage/notebook/#identifying-figures-in-the-notebook","title":"Identifying Figures in the Notebook","text":"<p>In your Jupyter notebook, you need to mark which figures you want to reference in your documentation. This is done using a special comment format at the beginning of a code cell.</p> <p>Example:</p> visualization.ipynb<pre><code># #my-figure\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8, 4))\nax.plot([1, 2, 3, 4], [10, 20, 25, 30])\nax.set_title('Sample Visualization')\n</code></pre> <p>The comment format has the following rules:</p> <ul> <li>It must be the first non-empty line in the cell</li> <li>It starts with a Python comment character (<code>#</code>) followed by a space</li> <li>Then comes the figure identifier, which also starts with <code>#</code></li> <li>Example: <code># #my-figure</code> identifies a figure with the ID <code>my-figure</code></li> </ul> <p>You can then reference this figure in your markdown:</p> <pre><code>![Sample Chart](visualization.ipynb){#my-figure}\n</code></pre>"},{"location":"usage/notebook/#benefits-of-this-approach","title":"Benefits of This Approach","text":"<p>This identifier method is:</p> <ul> <li>Simple to add and recognize in your notebooks</li> <li>Visible during normal notebook editing</li> <li>Doesn't require special cell tags or hidden metadata</li> <li>Maintains notebook usability for non-documentation purposes</li> </ul> <p>When you look at your notebook, you can immediately identify cells that will be referenced in the documentation by looking for the <code># #identifier</code> pattern at the top of the cell.</p>"},{"location":"usage/notebook/#automatic-notebook-selection","title":"Automatic Notebook Selection","text":"<p>When working with multiple figures from the same notebook, you can simplify your markdown by omitting the notebook filename in subsequent references. The plugin will automatically use the most recently specified notebook.</p> <p>Example:</p> <pre><code>![First Chart](visualization.ipynb){#figure-1}\n\n![Second Chart](){#figure-2}  &lt;!-- Uses visualization.ipynb --&gt;\n\nSome text between figures...\n\n![Third Chart](analysis.ipynb){#figure-3}\n\n![Fourth Chart](){#figure-4}  &lt;!-- Uses analysis.ipynb --&gt;\n</code></pre>"},{"location":"usage/notebook/#how-it-works","title":"How It Works","text":"<p>The plugin keeps track of the most recently referenced notebook:</p> <ol> <li>When a notebook is explicitly specified, it becomes the \"active\" notebook</li> <li>Empty parentheses <code>()</code> tell the plugin to use the active notebook</li> <li>Any new explicit notebook reference updates the active notebook</li> </ol>"},{"location":"usage/notebook/#benefits","title":"Benefits","text":"<p>This feature significantly reduces maintenance effort:</p> <ul> <li>Less repetition in your markdown files</li> <li>Easier refactoring - if you rename a notebook, you only need   to update the first reference, not every occurrence</li> <li>Cleaner documentation source with fewer duplicate filenames</li> </ul> <p>This approach is particularly useful for pages that reference multiple figures from the same notebook in sequence.</p>"}]}